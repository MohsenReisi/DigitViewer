/* ymi_CVN_strh_to_rawh_Default.h
 * 
 * Author           : Alexander J. Yee
 * Date Created     : 01/30/2011
 * Last Modified    : 04/06/2012
 * 
 * 
 *      ymi             =   Micro-Intrinsic
 *      CVN             =   Format Conversion Unit
 *      strh_to_rawh    =   Hexadecimal String -> Hexadecimal Raw
 *      Default         =   Default Instruction Set
 * 
 */

#ifndef _ymi_CVN_strh_to_rawh_Default_H
#define _ymi_CVN_strh_to_rawh_Default_H
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
#define ymi_CVN_strh_to_rawh_u0_Default(T, bad){ \
    register char _r0;  \
    \
    _r0 = ((const char*)(T))[0];    \
    \
    if (_r0 < '0' || _r0 > 'f') \
        bad = 1;    \
    if (_r0 > '9' && _r0 < 'a') \
        bad = 1;    \
    if (_r0 >= 'a') \
        _r0 -= 39;  \
    _r0 -= '0'; \
    \
    ((char*)(T))[0] = _r0;  \
}
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
#define ymi_CVN_strh_to_rawh_u2_Default32(T, bad){ \
    register u32_t _a0, _b0, _c0; \
    \
    _a0 = ((const u32_t*)(T))[0];   \
    \
    _b0 = _a0 & 0x80808080ull;  \
    bad |= _b0; \
    \
    _b0 = _a0 + 0x50505050ull;  \
    _b0 = ~_b0; \
    _b0 &= 0x80808080ull;   \
    bad |= _b0; \
    \
    _b0 = _a0 + 0x19191919ull;  \
    _b0 &= 0x80808080ull;   \
    bad |= _b0; \
    \
    _c0 = _a0 + 0x46464646ull;  \
    _c0 &= 0x80808080ull;   \
    \
    _b0 = _a0 + 0x1f1f1f1full;  \
    _b0 = ~_b0; \
    _b0 &= 0x80808080ull;   \
    _b0 &= _c0; \
    bad |= _b0; \
    \
    _c0 >>= 7;  \
    _c0 *= 39;  \
    _a0 -= _c0; \
    \
    _a0 -= 0x30303030ull;   \
    ((u32_t*)(T))[0] = _a0; \
}
#define ymi_CVN_strh_to_rawh_u3_Default32(T, bad){ \
    register u32_t _a0, _b0, _c0; \
    register u32_t _a1, _b1, _c1; \
    \
    _a0 = ((const u32_t*)(T))[0];   \
    _a1 = ((const u32_t*)(T))[1];   \
    \
    _b0 = _a0 & 0x80808080ull;  \
    _b1 = _a1 & 0x80808080ull;  \
    bad |= _b0; \
    bad |= _b1; \
    \
    _b0 = _a0 + 0x50505050ull;  \
    _b1 = _a1 + 0x50505050ull;  \
    _b0 = ~_b0; \
    _b1 = ~_b1; \
    _b0 &= 0x80808080ull;   \
    _b1 &= 0x80808080ull;   \
    bad |= _b0; \
    bad |= _b1; \
    \
    _b0 = _a0 + 0x19191919ull;  \
    _b1 = _a1 + 0x19191919ull;  \
    _b0 &= 0x80808080ull;   \
    _b1 &= 0x80808080ull;   \
    bad |= _b0; \
    bad |= _b1; \
    \
    _c0 = _a0 + 0x46464646ull;  \
    _c1 = _a1 + 0x46464646ull;  \
    _c0 &= 0x80808080ull;   \
    _c1 &= 0x80808080ull;   \
    \
    _b0 = _a0 + 0x1f1f1f1full;  \
    _b1 = _a1 + 0x1f1f1f1full;  \
    _b0 = ~_b0; \
    _b1 = ~_b1; \
    _b0 &= 0x80808080ull;   \
    _b1 &= 0x80808080ull;   \
    _b0 &= _c0; \
    _b1 &= _c1; \
    bad |= _b0; \
    bad |= _b1; \
    \
    _c0 >>= 7;  \
    _c1 >>= 7;  \
    _c0 *= 39;  \
    _c1 *= 39;  \
    _a0 -= _c0; \
    _a1 -= _c1; \
    \
    _a0 -= 0x30303030ull;   \
    _a1 -= 0x30303030ull;   \
    ((u32_t*)(T))[0] = _a0; \
    ((u32_t*)(T))[1] = _a1; \
}
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
#define ymi_CVN_strh_to_rawh_u3_Default64(T, bad){ \
    register u64_t _a0, _b0, _c0; \
    \
    _a0 = ((const u64_t*)(T))[0];   \
    \
    _b0 = _a0 & 0x8080808080808080ull;  \
    bad |= _b0; \
    \
    _b0 = _a0 + 0x5050505050505050ull;  \
    _b0 = ~_b0; \
    _b0 &= 0x8080808080808080ull;   \
    bad |= _b0; \
    \
    _b0 = _a0 + 0x1919191919191919ull;  \
    _b0 &= 0x8080808080808080ull;   \
    bad |= _b0; \
    \
    _c0 = _a0 + 0x4646464646464646ull;  \
    _c0 &= 0x8080808080808080ull;   \
    \
    _b0 = _a0 + 0x1f1f1f1f1f1f1f1full;  \
    _b0 = ~_b0; \
    _b0 &= 0x8080808080808080ull;   \
    _b0 &= _c0; \
    bad |= _b0; \
    \
    _c0 >>= 7;  \
    _c0 *= 39;  \
    _a0 -= _c0; \
    \
    _a0 -= 0x3030303030303030ull;   \
    ((u64_t*)(T))[0] = _a0; \
}
#define ymi_CVN_strh_to_rawh_u4_Default64(T, bad){ \
    register u64_t _a0, _b0, _c0; \
    register u64_t _a1, _b1, _c1; \
    \
    _a0 = ((const u64_t*)(T))[0];   \
    _a1 = ((const u64_t*)(T))[1];   \
    \
    _b0 = _a0 & 0x8080808080808080ull;  \
    _b1 = _a1 & 0x8080808080808080ull;  \
    bad |= _b0; \
    bad |= _b1; \
    \
    _b0 = _a0 + 0x5050505050505050ull;  \
    _b1 = _a1 + 0x5050505050505050ull;  \
    _b0 = ~_b0; \
    _b1 = ~_b1; \
    _b0 &= 0x8080808080808080ull;   \
    _b1 &= 0x8080808080808080ull;   \
    bad |= _b0; \
    bad |= _b1; \
    \
    _b0 = _a0 + 0x1919191919191919ull;  \
    _b1 = _a1 + 0x1919191919191919ull;  \
    _b0 &= 0x8080808080808080ull;   \
    _b1 &= 0x8080808080808080ull;   \
    bad |= _b0; \
    bad |= _b1; \
    \
    _c0 = _a0 + 0x4646464646464646ull;  \
    _c1 = _a1 + 0x4646464646464646ull;  \
    _c0 &= 0x8080808080808080ull;   \
    _c1 &= 0x8080808080808080ull;   \
    \
    _b0 = _a0 + 0x1f1f1f1f1f1f1f1full;  \
    _b1 = _a1 + 0x1f1f1f1f1f1f1f1full;  \
    _b0 = ~_b0; \
    _b1 = ~_b1; \
    _b0 &= 0x8080808080808080ull;   \
    _b1 &= 0x8080808080808080ull;   \
    _b0 &= _c0; \
    _b1 &= _c1; \
    bad |= _b0; \
    bad |= _b1; \
    \
    _c0 >>= 7;  \
    _c1 >>= 7;  \
    _c0 *= 39;  \
    _c1 *= 39;  \
    _a0 -= _c0; \
    _a1 -= _c1; \
    \
    _a0 -= 0x3030303030303030ull;   \
    _a1 -= 0x3030303030303030ull;   \
    ((u64_t*)(T))[0] = _a0; \
    ((u64_t*)(T))[1] = _a1; \
}
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
#endif
