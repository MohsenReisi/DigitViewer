/* ymi_CVN_ud_to_rawd_Default.h
 * 
 * Author           : Alexander J. Yee
 * Date Created     : 01/20/2011
 * Last Modified    : 01/20/2011
 * 
 * 
 *      ymi         =   Micro-Intrinsic
 *      CVN         =   Format Conversion Unit
 *      ud_to_rawd  =   Decimal Integer -> Decimal Raw
 *      Default     =   Default Instruction Set
 * 
 * 
 *      This file implements a word-sized radix conversion from binary to decimal.
 */

#ifndef _ymi_CVN_ud_to_rawh_Default_H
#define _ymi_CVN_ud_to_rawh_Default_H
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
#define ymi_CVN_u64d19_to_rawd_u0_Default(T, A){ \
    u64_t _r0 = ((const u64_t*)(A))[0]; \
    \
    ((char*)(T))[18] = (char)(_r0 % 10);    \
    _r0 /= 10;  \
    ((char*)(T))[17] = (char)(_r0 % 10);    \
    _r0 /= 10;  \
    ((char*)(T))[16] = (char)(_r0 % 10);    \
    _r0 /= 10;  \
    ((char*)(T))[15] = (char)(_r0 % 10);    \
    _r0 /= 10;  \
    ((char*)(T))[14] = (char)(_r0 % 10);    \
    _r0 /= 10;  \
    ((char*)(T))[13] = (char)(_r0 % 10);    \
    _r0 /= 10;  \
    ((char*)(T))[12] = (char)(_r0 % 10);    \
    _r0 /= 10;  \
    ((char*)(T))[11] = (char)(_r0 % 10);    \
    _r0 /= 10;  \
    ((char*)(T))[10] = (char)(_r0 % 10);    \
    _r0 /= 10;  \
    ((char*)(T))[ 9] = (char)(_r0 % 10);    \
    _r0 /= 10;  \
    ((char*)(T))[ 8] = (char)(_r0 % 10);    \
    _r0 /= 10;  \
    ((char*)(T))[ 7] = (char)(_r0 % 10);    \
    _r0 /= 10;  \
    ((char*)(T))[ 6] = (char)(_r0 % 10);    \
    _r0 /= 10;  \
    ((char*)(T))[ 5] = (char)(_r0 % 10);    \
    _r0 /= 10;  \
    ((char*)(T))[ 4] = (char)(_r0 % 10);    \
    _r0 /= 10;  \
    ((char*)(T))[ 3] = (char)(_r0 % 10);    \
    _r0 /= 10;  \
    ((char*)(T))[ 2] = (char)(_r0 % 10);    \
    _r0 /= 10;  \
    ((char*)(T))[ 1] = (char)(_r0 % 10);    \
    _r0 /= 10;  \
    ((char*)(T))[ 0] = (char)_r0;   \
}
#define ymi_CVN_u64d19_to_rawd_u1_Default(T, A){    \
    u64_t _r0 = ((const u64_t*)(A))[0]; \
    u64_t _r1 = ((const u64_t*)(A))[1]; \
    \
    ((char*)(T))[18] = (char)(_r0 % 10);    \
    ((char*)(T))[37] = (char)(_r1 % 10);    \
    _r0 /= 10;  \
    _r1 /= 10;  \
    ((char*)(T))[17] = (char)(_r0 % 10);    \
    ((char*)(T))[36] = (char)(_r1 % 10);    \
    _r0 /= 10;  \
    _r1 /= 10;  \
    ((char*)(T))[16] = (char)(_r0 % 10);    \
    ((char*)(T))[35] = (char)(_r1 % 10);    \
    _r0 /= 10;  \
    _r1 /= 10;  \
    ((char*)(T))[15] = (char)(_r0 % 10);    \
    ((char*)(T))[34] = (char)(_r1 % 10);    \
    _r0 /= 10;  \
    _r1 /= 10;  \
    ((char*)(T))[14] = (char)(_r0 % 10);    \
    ((char*)(T))[33] = (char)(_r1 % 10);    \
    _r0 /= 10;  \
    _r1 /= 10;  \
    ((char*)(T))[13] = (char)(_r0 % 10);    \
    ((char*)(T))[32] = (char)(_r1 % 10);    \
    _r0 /= 10;  \
    _r1 /= 10;  \
    ((char*)(T))[12] = (char)(_r0 % 10);    \
    ((char*)(T))[31] = (char)(_r1 % 10);    \
    _r0 /= 10;  \
    _r1 /= 10;  \
    ((char*)(T))[11] = (char)(_r0 % 10);    \
    ((char*)(T))[30] = (char)(_r1 % 10);    \
    _r0 /= 10;  \
    _r1 /= 10;  \
    ((char*)(T))[10] = (char)(_r0 % 10);    \
    ((char*)(T))[29] = (char)(_r1 % 10);    \
    _r0 /= 10;  \
    _r1 /= 10;  \
    ((char*)(T))[ 9] = (char)(_r0 % 10);    \
    ((char*)(T))[28] = (char)(_r1 % 10);    \
    _r0 /= 10;  \
    _r1 /= 10;  \
    ((char*)(T))[ 8] = (char)(_r0 % 10);    \
    ((char*)(T))[27] = (char)(_r1 % 10);    \
    _r0 /= 10;  \
    _r1 /= 10;  \
    ((char*)(T))[ 7] = (char)(_r0 % 10);    \
    ((char*)(T))[26] = (char)(_r1 % 10);    \
    _r0 /= 10;  \
    _r1 /= 10;  \
    ((char*)(T))[ 6] = (char)(_r0 % 10);    \
    ((char*)(T))[25] = (char)(_r1 % 10);    \
    _r0 /= 10;  \
    _r1 /= 10;  \
    ((char*)(T))[ 5] = (char)(_r0 % 10);    \
    ((char*)(T))[24] = (char)(_r1 % 10);    \
    _r0 /= 10;  \
    _r1 /= 10;  \
    ((char*)(T))[ 4] = (char)(_r0 % 10);    \
    ((char*)(T))[23] = (char)(_r1 % 10);    \
    _r0 /= 10;  \
    _r1 /= 10;  \
    ((char*)(T))[ 3] = (char)(_r0 % 10);    \
    ((char*)(T))[22] = (char)(_r1 % 10);    \
    _r0 /= 10;  \
    _r1 /= 10;  \
    ((char*)(T))[ 2] = (char)(_r0 % 10);    \
    ((char*)(T))[21] = (char)(_r1 % 10);    \
    _r0 /= 10;  \
    _r1 /= 10;  \
    ((char*)(T))[ 1] = (char)(_r0 % 10);    \
    ((char*)(T))[20] = (char)(_r1 % 10);    \
    _r0 /= 10;  \
    _r1 /= 10;  \
    ((char*)(T))[ 0] = (char)_r0;   \
    ((char*)(T))[19] = (char)_r1;   \
}
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
#endif
